name: Deploy Mastodon to AWS Fargate
on:
  push:
    branches:
      - 'dev'
      - 'release**'
      - 'test-ci'
  workflow_dispatch:

env:
  # select environment based on the branch
  ENVIRONMENT: ${{ ( startsWith(github.ref, 'refs/heads/release')  && 'production') || ((github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test-ci') && 'staging') || 'developer' }}

jobs:
  setup-env:
    name: Setup Environment
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
    steps:
      - name: Check environment name
        run: echo "environment=$ENVIRONMENT" | tee $GITHUB_OUTPUT

  build-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: setup-env
    environment:
      name: ${{ ( startsWith(github.ref, 'refs/heads/release')  && 'production') || ((github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test-ci') && 'staging') || 'developer' }}
    outputs:
      image: ${{ steps.build-image.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Selected environment of the job
        run: echo "Environment name is ${{  job.environment }}"
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR üè∑
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: ./.github/scripts/build_image.sh

  deploy-webservice:
    name: Deploy webservice on Fargate
    runs-on: ubuntu-latest
    needs: build-image

    # set environment of workflow based on branch
    environment:
      name: ${{ ( startsWith(github.ref, 'refs/heads/release')  && 'production') || ((github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test-ci') && 'staging') || 'developer' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def-webservice
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployment/${{ env.ENVIRONMENT }}/task-definition-webservice.json
          container-name: webservice
          image: ${{ needs.build-image.outputs.image  }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-webservice.outputs.task-definition }}
          cluster: ${{ vars.CLUSTER_NAME }}
          service: webservice
          wait-for-service-stability: true

  deploy-streaming:
    name: Deploy streaming on Fargate
    runs-on: ubuntu-latest
    needs: build-image

    # set environment of workflow based on branch
    environment:
      name: ${{ ( startsWith(github.ref, 'refs/heads/release')  && 'production') || ((github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test-ci') && 'staging') || 'developer' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def-streaming
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployment/${{ env.ENVIRONMENT }}/task-definition-streaming.json
          container-name: streaming
          image: ${{ needs.build-image.outputs.image  }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-streaming.outputs.task-definition }}
          cluster: ${{ vars.CLUSTER_NAME }}
          service: streaming
          wait-for-service-stability: true

  deploy-sidekiq:
    name: Deploy sidekiq on Fargate
    runs-on: ubuntu-latest
    needs: build-image

    # set environment of workflow based on branch
    environment:
      name: ${{ ( startsWith(github.ref, 'refs/heads/release')  && 'production') || ((github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/test-ci') && 'staging') || 'developer' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Fill in the new image ID in the AWS ECS task definition
        id: task-def-sidekiq
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deployment/${{ env.ENVIRONMENT }}/task-definition-sidekiq.json
          container-name: sidekiq
          image: ${{ needs.build-image.outputs.image  }}
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-sidekiq.outputs.task-definition }}
          cluster: ${{ vars.CLUSTER_NAME }}
          service: sidekiq
          wait-for-service-stability: true
